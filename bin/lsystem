#!/usr/bin/env python

"""
L-system
using the syntax of https://twitter.com/lsystembot
(but to use their exact alphabet, use "--draw F --move f", our default alphabet draws with A or F)

The "l" directory has a collection of models, they're JSON with
{
    "a": angle in degrees, default 90,
    "iter": number of iterations, default 8
    "start": the starting string or axiom, default F
    "rules": {
        "F": "whatever F expands to",
        "y": "whatever y expands to" (etc. - as many rules as you want)
    }
    "draw": characters that move and draw, default AF
    "move": characters that move without drawing, default BGf
}

Strings have special characters that are drawing transformations, below.
All other characters are allowed but do not render in the output.

Character  Meaning
   F, A       Move forward by line length drawing a line
   G, B, f    Move forward by line length without drawing a line
   +          Turn left by turning angle
   -          Turn right by turning angle
   [          Push current drawing state onto stack
   ]          Pop current drawing state from the stack
   |          Reverse direction (ie: turn by 180 degrees)
   >          Multiply the line length by the line length scale factor
   <          Divide the line length by the line length scale factor

To maybe implement later: (http://paulbourke.net/fractals/lsys/)
   {          Open a polygon
   }          Close a polygon and fill it with fill colour
   &          Swap the meaning of + and -
   (          Decrement turning angle by turning angle increment
   )          Increment turning angle by turning angle increment
   #          select the next pen color

And maybe some 3d extensions, e.g.
   ^          pitch up
   &          pitch down
   /          roll, like +
   \\         roll, like -
   *          roll 180, like |

"""

import sys
import json
import math
import logging
from dataclasses import dataclass, replace
import click


@dataclass
class Bound:
    x1: float
    y1: float
    x2: float
    y2: float


@dataclass
class Point:
    x: float
    y: float
    a: float

    def move(self, length):
        self.x += length * math.cos(math.radians(self.a))
        self.y += length * math.sin(math.radians(self.a))

    def __add__(self, angle):
        self.a += angle
        return self

    def __sub__(self, angle):
        self.a -= angle
        return self


def ps_line(points):
    if len(points) <= 1:
        # One point isn't enough for a line
        return ""
    result = ["newpath"]
    first = True
    for point in points:
        if first:
            result.append(f"{point.x} {point.y} moveto")
        else:
            result.append(f"{point.x} {point.y} lineto")
        first = False
    result.append("stroke")
    return " ".join(result) + "\n"


POSTSCRIPT_MAPPING = {
    "pre": """%!PS-Adobe-3.0
%%Orientation: Landscape
%%DocumentMedia: Default 612 792 80 () ()
%%Pages: 1
%%EndComments
%%EndProlog
%%BeginSetup
  % Letter
  <</PageSize[612 792]/Orientation 0>>setpagedevice
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
90 rotate 0 -612 translate
%%EndPageSetup
/s 0.0072 def
s s scale
0.1 s div setlinewidth
0 setgray
""",
    "post": """showpage
%%Trailer
%%EOF""",
    "line": ps_line,
    "sep": " ",
    "scalex": 110000,  # 10000 units per inch
    "scaley": 85000
}


def hpgl_line(points):
    if len(points) <= 1:
        # One point isn't enough for a line
        return ""
    result = ["PU;"]
    n = 0
    for point in points:
        if n == 1:
            result.append(f"PD;")
        result.append(f"PA{point.x},{point.y};")
        n += 1
    return "".join(result)


HPGL_MAPPING = {
    "pre": "IN;IP;PU;SP1;LT;PA0,0;",
    "post": "PU;PA0,0;SP0;",
    "line": hpgl_line,
    "sep": ",",
    "scalex": 10365,  # 1016 units per inch
    "scaley":  7962
}

ITER_DEFAULT = 8
ANGLE_DEFAULT = 90
AXIOM_DEFAULT = "F"

DRAWCHARS = "AF"
MOVECHARS = "BGf"


class LSystem(object):

    """
    Initialize with a mapping (to the output format)
    and a string which is the LSystem expressed in JSON.
    """

    def __init__(self, mapping, process, init, iter, draw, move, zoom):
        self.mapping = mapping
        self.process = process
        self.state = None
        self.stack = []
        self.point = Point(0, 0, init)
        self.bound = Bound(0, 0, 1, 1)
        self.iter = iter or self.process.get("iter", ITER_DEFAULT)
        self.angle = self.process.get("a", ANGLE_DEFAULT)
        self.scale = self.process.get("scale", 1.0)
        self.drawchars = draw or self.process.get("draw", DRAWCHARS)
        self.movechars = move or self.process.get("move", MOVECHARS)
        self.lines = []     # array of lines
        self.line = []      # array of points
        self.length = 1.0
        self.zoom = zoom

    def run(self):
        self.state = "[]" + self.process.get("start", AXIOM_DEFAULT)
        for _ in range(self.iter):
            logging.debug(self.state)
            self.state = "".join([self.process["rules"].get(c, c) for c in self.state])
        logging.debug(self.state)
        self.build()
        return self.render()

    def build(self):
        # Make lines
        for c in self.state:
            self.act(c)
        self.lines.append(self.line)
        self.line = []

    def act(self, action):
        result = []
        if action == "+":
            self.point = self.point + self.angle
        elif action in ["-", chr(0x2212)]:
            self.point = self.point - self.angle
        elif action == "|":
            self.point = self.point + 180
        elif action == "[":
            # Push point onto the stack
            self.stack.append(replace(self.point))
        elif action == "]":
            # Pop the stack and go back there
            self.point = self.stack.pop()
            # Move there (start a new line)
            self.lines.append(self.line)
            self.line = [replace(self.point)]
        elif action == ">":
            # Grow the line length
            self.length *= self.scale
        elif action == "<":
            # Shrink the line length
            self.length /= self.scale
        elif action in self.drawchars:
            # move and draw
            self.point.move(self.length)
            self.line.append(replace(self.point))
        elif action in self.movechars:
            # move (start a new line)
            self.point.move(self.length)
            self.lines.append(self.line)
            self.line = [replace(self.point)]
        else:
            # Other characters have no effect on the state
            pass
        return result

    def render(self):
        # Find the bounding box of all the lines
        for line in self.lines:
            for point in line:
                self.update_bounds(point)
        # Scale and center to the bounding box
        xmul = self.mapping["scalex"] / (self.bound.x2 - self.bound.x1)
        ymul = self.mapping["scaley"] / (self.bound.y2 - self.bound.y1)
        xmid = (self.bound.x2 + self.bound.x1)/2
        ymid = (self.bound.y2 + self.bound.y1)/2
        mult = min(xmul, ymul) * self.zoom
        xoff = self.mapping["scalex"]/2
        yoff = self.mapping["scaley"]/2

        def scaled(pt):
            x = int((pt.x - xmid) * mult + xoff)
            y = int((pt.y - ymid) * mult + yoff)
            return Point(x, y, 0)

        # Draw the lines we made
        output = [self.mapping["pre"]]
        for line in self.lines:
            output.append(self.mapping["line"]([scaled(point) for point in line]))
        output.append(self.mapping["post"])
        return "".join(output)

    def update_bounds(self, point):
        if point.x < self.bound.x1:
            self.bound.x1 = point.x
        if point.y < self.bound.y1:
            self.bound.y1 = point.y
        if point.x > self.bound.x2:
            self.bound.x2 = point.x
        if point.y > self.bound.y2:
            self.bound.y2 = point.y


@click.command()
@click.argument("STRING")
@click.option("--file", is_flag=True, help="Input is a filename not lsystem string")
@click.option("--ps", is_flag=True, help="PostScript output (default is HPGL)")
@click.option("--verbose", is_flag=True, help="Print some debugging information")
@click.option("--iter", default=None, type=int, help="Override the number of iterations")
@click.option("--draw", default=None, help="Alphabet that draw (default is 'AF')")
@click.option("--move", default=None, help="Alphabet that move (default is 'BGf')")
@click.option("--init", default=0, help="Initial angle (degrees)")
@click.option("--zoom", default=0.88, help="Zoom factor (1.0 to draw to the paper edge)")
def main(string, file, ps, verbose, iter, draw, move, init, zoom):
    #
    # Take the string, e.g.
    # {"start":"F", "rules":{"F":"F-F++F-F"}, "a":60, "iter":1}
    # {"start":"FX","rules":{"F":"XF-","J":"++KXKKJ","K":"+","X":"[]++J+XFXF"},"a":72,"iter":4}
    #
    logging.basicConfig(level=logging.DEBUG if verbose else logging.INFO)

    # If it's a file, read string from the file
    if file:
        with open(string, "r") as stringfile:
            string = stringfile.read()

    if ps:
        mapper = POSTSCRIPT_MAPPING
    else:
        mapper = HPGL_MAPPING

    try:
        process = json.loads(string)
    except json.decoder.JSONDecodeError as ex:
        sys.exit("Couldn't decode string '{}' as JSON: {}".format(string, ex))

    print(LSystem(mapper, process, init, iter, draw, move, zoom).run())


if __name__ == "__main__":
    main()
